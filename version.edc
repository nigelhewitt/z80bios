Version logging for BIOS

  update to git repository
	git add -u					move updates to staging area
   	git commit -m "0.1.31"		move to local repository, use version number
   	git push -u origin main		move to github

0.1.6
Started the log. RTC works but not write to the RTC ram
Fix to DOW (day of the week)
Added ALLOW_ANSI conditional and colours via macros

0.1.7
Rewrite and restyle the README.md
Fix BLUE colour (typo)
Fix RTC RAM write

0.1.8
Add map.asm to contain page mapping stuff
Write the 'stack free' routines to get/put data anywhere

0.1.9
Add preliminary bios1/2 handlers breaking out zeta2.inc and macros.inc
Add error codes and move help to bios1 to gain ram space in PAGE3

0.1.10
Worked on ROM programming interface and successfully read the device codes
Switch to the ld a, [some_address] format rather than (some_address)

0.1.11
Wrote to ROM
Add + option to d to show the next sequential block

0.1.12
Introduce 32 bit numbers primarily for SD sectors. However this gives me an
opportunity to sort out the mess hex and decimal numbers have become.
Rewrite the SPI interface and try to make the SD code more approachable.
Write the FAT32 technology demonstrator for a PC in C++ to read SD cards and
start to extend it to other FAT variants for the floppy disk drive.
Reverse the polarity of the LEDs to match the new case wiring
Add the option flags and copy switches to lights on option A.

0.1.13
Mostly today I was rewiring things now that I have the new parts.
Copy ROM1 and ROM2 into RAM4 and RAM5 at boot so I can have 'local' variables
and then modify the CALLBIOS macro to use RAM4/5.
Add the M command to read the SD. Naturally it doesn't work yet.
Add date/time to the BIOS1/2 sign on plus a RAM check

0.1.14
Modify DUMP et al to use [C:IX] as [IX] when C==0xff to get local addressing
Reworked the SPI interface
Added a 'beep on error' to make.ps1
Redesign the 'run routine in another bios' as the original system had a stack
fault and needed speeding up.
Find another, better I think, SD system. Edit it to fit in and start debugging.
Introduce the stepper to provide fixed addresses for a change from one ROM to
another without using a code wedge.
Rewrite the PAGE0 stuff to try and get a cleaner cold boot.
Revised space reporting as the stepper system goes at the top of ROM.
Fixed the 'no interrupts on power up' by direct calling a bland interrupt
handler to get a RETI executed.
Added a 'wait for RAM' in the startup and that seemed to fix it. Probably the
DS1210 RAM backup wasn't letting the chip enable go fast enough.

0.1.15
Shift the Baud rate to 115200, that's six times faster and is a quite visible
improvement.
Tweak the clear command to clear to top line and not do a restart.
Put the initialisation part of the FAT handler in so an SD can be read for all
it's relevant details for a partition.

0.1.16
Tidy up github and include the CPP modules as they are part of the trail.
Modify the CALLBIOS system that calls functions is another ROM to make it
simpler in operation. Now all the registers are passed in and even the flags
are passed out. A function may either jump to good_end (or bad_end but since I
am promising all flags returned it's the same thing) or return.

0.1.17
Hacking along coding the FAT system so this is mainly a backup save.
The FAT drive working set me onto translating the clusters module.
Then I split off the FAT data structures into their own file.
Next is folders which should give me file directories on screen.
I modified the commands to be 1-4 characters as it was getting hard to be find
a suitable single letter so the ReadMe and the help screen.

0.1.18
Made a couple of speedups in macros.inc
Modified CALLBIOS returns so if the wedge returns its flags are preserved, if
it jumps to good_end CY is set and bad_end CY is cleared. It is up to the
caller what they do with this.
Moved the ROM and HEX functions to BIOS2 to make sure all the command line
stuff carries over and to clear a bit more space in BIOS0.
Add CORE command to restore user RAM to pristine condition.
Add a stack overflow warning.
Added code to restore the command line buffer if the 'up arrow' pressed'
(except what you've already overtyped).
Add WAIT (while SW7 down) and trigger rolling lights on SW6 in BIOS2 to test
the interrupt system working in 'other' BIOS chips.
Save the FLAG code at RTC ram so they are preserved across boots and power
downs.

0.1.19
More coding for the fat system.
Also revised the 24bit addressing ldir code.
Started concept work on a heap allocation to make the wide open spaces of
paged RAM accessible.
Debug bank_ldir fort this and add a COPY command to test it
This leaves me with some variants on DUMP but macros cost nothing if you don't
use then so I'll leave them on file.

0.1.20
I typed up the rest of the FAT system to the point of having a test function
ready to call. This is just that untested stuff so only a local version.
It compiles so it might be a good point to recover to...
The DIR command works for C:/ and the scaffolding for the other command is in
place and disk selection works.

0.1.21
Added getW to get a FAT compatible WCHAR string from the input buffer using
UTF-8 rules rather than Windows locales. Added a matching stdio_txtW. It works
with putty OK.

0.1.22
Fix drive selection and prompt to use CWD if mounter or 'fake it' as C:\ if not
The majority of CD is working (not . or ..) and DIR works

0.1.23
DIR and CD working at a basic level. Consider it an interim save before doing a
full test and fix study.

0.1.24
Clean up on Help and the README.md
Add bad-finder.ps1 to pick up things like xor a,0x10 which really threw me.
It fixed the \ to / bug.
Changes to CALLBIOS making it CALLFAR so I can do smaller functions with
reasonable alacrity.
Coded the preliminary seekFile. Interim insurance save.

0.1.25
Rationalise Local in files.asm
Seek almost working
Open, getc and TYPE progressing.
Another insurance save

0.1.26
TYPE now working over sector and cluster boundaries.

0.1.27
Move to my own terminal in Z80debug rather than putty to start the debugger
This is a backup to include the prototype debug systems now working as a
terminal with colours and UTF-8.
I also added a .gitignore to tidy things up a bit

0.1.28
Rationalise the system to report what pages are in the map.

0.1.29
Mostly a save for the Z80debug C++ stuff and the provisional design for the
'single step' board. The Z80debug now does files and jumps to labels and sets
up the breakpoint stuff at the PC end. Also some colour tweaks.

0.1.30
A lot of Debugger level-up. Most of the Memory window stuff done and the system
now applies traps and manages the file views. Still waiting for parts on the
NMI based single step add on.

0.1.31
Tear down and redesign on the Debugger. As the code view and break points work
I've finished the PCB for the single stepper (NMI based) and I'll get a board
made as my poor old eyes and fingers aren't hand wiring that sort of thing.
